
#include <openssl/rsa.h>

//用户密码加密 A1 + 密钥索引(5) + (用户号码长度)用户号码(16位) + 密码数据(256) + 目标密钥索引(5) | A2 + 00 + 密钥数据(64)
static int HsmFunc_A1(char *cmd,char *inData,int len,char *outData)
{
  char          strKeyIndex[6];
  int           rv;
  THsmKeyInfo   hsmKeyInfoA,hsmKeyInfoB;
  RSA          *rsa;
  uchar         rsaN[129],rsaD[129];
  uchar         userId[25];
  int           dataLen;
  uchar         enData[129],deData[129];
  uchar         newEnData[129];
  uchar         userPwd[20];

  memset(&hsmKeyInfoA, 0, sizeof(THsmKeyInfo));
  memset(rsaN, 0, sizeof(rsaN));
  memset(rsaD, 0, sizeof(rsaD));
  memset(strKeyIndex,0,sizeof(strKeyIndex));

  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoA.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoA );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoA.keyType != '3' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex, inData, 2);
  inData += 2;
  dataLen = strtol(strKeyIndex,NULL,10);

  memset(userId, 0, sizeof(userId) );
  memcpy(userId, inData, dataLen);
  inData += dataLen;

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex, inData, 3);
  inData += 3;
  dataLen = strtol(strKeyIndex,NULL,10);
  memset(enData, 0, sizeof(enData) );
  strToBin(inData, enData, dataLen);
  inData += dataLen * 2;


  rsa = RSA_new();
  if ( rsa == NULL )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  rsa->d = BN_bin2bn( (uchar *)hsmKeyInfoA.keyDataA, hsmKeyInfoA.keyLen, rsa->d );
  rsa->n = BN_bin2bn( (uchar *)hsmKeyInfoA.keyDataB, hsmKeyInfoA.keyLen, rsa->n );
  rsa->e = BN_bin2bn( "\x01\x00\x01", 3, rsa->e );

  memset(deData, 0, sizeof(deData) );

  rv = RSA_private_decrypt( dataLen, enData, deData, rsa, RSA_PKCS1_PADDING );
  if ( rv == -1 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密失败",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96解密失败");
    RSA_free( rsa );
    return TTS_EGENERAL;
  }

  RSA_free( rsa );
  
  //密码数据格式为 00000000 + 08(密码长度) + 12345678 + 日期(8) + 时间(6)
  if ( memcmp(deData, "00000000", 8 ) != 0 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密后数据非法",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96数据非法");
    return TTS_EGENERAL;
  }

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex, deData + 8 , 2);
  dataLen = strtol(strKeyIndex,NULL,10);
  memset(userPwd, 0, sizeof(userPwd) );
  memcpy(userPwd, deData + 10, dataLen);

  memset(enData, 0, sizeof(enData) );
  memset(newEnData,0,sizeof(newEnData));

  snprintf(newEnData, sizeof(newEnData), "%02d%s%02d%s", strlen(userId), userId, strlen(userPwd), userPwd);  
  snprintf(enData, 33, "%032s", newEnData);
  dataLen = 32;
 
  ELOG(ERROR,"RSADATA[%s][%s]", enData,newEnData);

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoB.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoB );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoB.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoB.keyType != '2' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoB.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  endesmBlock(hsmKeyInfoB.keyDataA, DES_MODE_2, enData, dataLen);

  strncat(outData,"00",2);
  
  binToStr(enData,outData + 2,dataLen);

  return 0;
}


//银行卡密码加密 B1 + 密钥索引(5) + 订单号(16位) + 密码数据(256) + 目标密钥索引(5) + FACTTORA + FACTTORB + FACTTORC + (长度) + 卡号| B2 + 00 + 密钥数据(16)
static int HsmFunc_B1(char *cmd,char *inData,int len,char *outData)
{
  char          strKeyIndex[6];
  int           rv;
  THsmKeyInfo   hsmKeyInfoA,hsmKeyInfoB;
  RSA          *rsa;
  uchar         rsaN[129],rsaD[129];
  int           dataLen;
  char          binKeyB[17];
  char          pinData[9];
  char          panData[20];
  char          nPinData[9];
  uchar         enData[129],deData[129];
  char          factorA[17],factorB[17],factorC[17];


  memset(&hsmKeyInfoA, 0, sizeof(THsmKeyInfo));
  memset(rsaN, 0, sizeof(rsaN));
  memset(rsaD, 0, sizeof(rsaD));
  
  memset(strKeyIndex,0,sizeof(strKeyIndex));

  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoA.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoA );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoA.keyType != '3' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  memset(panData, 0, sizeof(panData));
  memcpy(panData, inData, 16);
  inData += 16;

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex, inData, 3);
  inData += 3;
  dataLen = strtol(strKeyIndex,NULL,10);
  memset(enData, 0, sizeof(enData) );
  strToBin(inData, enData, dataLen);
  inData += dataLen * 2;

  rsa = RSA_new();
  if ( rsa == NULL )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  rsa->d = BN_bin2bn( (uchar *)hsmKeyInfoA.keyDataA, hsmKeyInfoA.keyLen, rsa->d );
  rsa->n = BN_bin2bn( (uchar *)hsmKeyInfoA.keyDataB, hsmKeyInfoA.keyLen, rsa->n );
  rsa->e = BN_bin2bn( "\x01\x00\x01", 3, rsa->e );

  memset(deData, 0, sizeof(deData) );

  rv = RSA_private_decrypt( dataLen, enData, deData, rsa, RSA_PKCS1_PADDING );
  if ( rv == -1 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密失败",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96解密失败");
    RSA_free( rsa );
    return TTS_EGENERAL;
  }

  RSA_free( rsa );
  
  //deData 为银行卡密码信息  FFFFFFFF + PAN + 123456 + 

  if ( memcmp(deData, "FFFFFFFF", 8 ) != 0 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密后数据非法(PIN数据头信息不正确)",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96数据非法");
    return TTS_EGENERAL;
  }

  if ( memcmp(deData + 8 , panData, 16 ) != 0 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密后数据非法(PAN数据不正确)",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96数据非法");
    return TTS_EGENERAL;
  }

  memset(pinData, 0, sizeof(pinData));
  memcpy(pinData, deData + 24, 6);


  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoB.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoB );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoB.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoB.keyType != '2' && hsmKeyInfoB.keyType != '1' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确",hsmKeyInfoB.keyIdx);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  dataLen = 8;
  memset(factorA,0,sizeof(factorA));
  strToBin(inData, factorA, dataLen);
  inData += 16;
  memset(factorB,0,sizeof(factorB));
  strToBin(inData, factorB, dataLen);
  inData += 16;
  memset(factorC,0,sizeof(factorC));
  strToBin(inData, factorC, dataLen);
  inData += 16;

  discreteKey(hsmKeyInfoB.keyDataA, factorA, hsmKeyInfoB.keyDataA);
  discreteKey(hsmKeyInfoB.keyDataA, factorB, hsmKeyInfoB.keyDataA);
  discreteKey(hsmKeyInfoB.keyDataA, factorC, hsmKeyInfoB.keyDataA);

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex,inData,2);
  inData += 2;
  dataLen = strtol(strKeyIndex,NULL,10);
   
  memset(panData, 0, sizeof(panData));
  memset(panData, '0', 16);
  if ( dataLen >= 16 )
  {
    memcpy(panData, inData + (dataLen - 16), 16);
  }
  else
  {
    memcpy(panData + (16 - dataLen), inData, dataLen);
  }
  ELOG(ERROR, "NEW PAN (%s)(%s)", panData, pinData);
  inData += dataLen;
    
  memset(nPinData,0,sizeof(nPinData));
  rv = HsmProcessPin(panData, hsmKeyInfoB.keyDataA, pinData, nPinData, 'E');
  if ( rv )
  {
    ELOG(ERROR,"密钥系统加密USERPIN失败,返回码:%d",rv);
    strcpy(outData,"01无效PIN数据");
    return rv;
  }
  strncat(outData,"00",2);
  binToStr(nPinData,outData+2,8);
  return 0;

}

//银行卡密码加密 B2 + 密钥索引(5) + 订单号(16位) + 密码数据(256) + 目标密钥索引(5) | B2 + 00 + 密钥数据(16)
static int HsmFunc_B2(char *cmd,char *inData,int len,char *outData)
{
  char          strKeyIndex[6];
  int           rv, i = 0;
  THsmKeyInfo   hsmKeyInfoA,hsmKeyInfoB;
  RSA          *rsa;
  uchar         rsaN[129],rsaD[129];
  int           dataLen;
  char          binKeyB[17];
  char          pinData[9];
  char          panData[20];
  char          binWorkData[17];
  char          workData[33];
  char          pinType[2] = {0};
  char          nPinData[9];
  char          PAN[17] = {0};
  uchar         enData[129],deData[129];

  memset(&hsmKeyInfoA, 0, sizeof(THsmKeyInfo));
  memset(rsaN, 0, sizeof(rsaN));
  memset(rsaD, 0, sizeof(rsaD));
  
  memset(strKeyIndex,0,sizeof(strKeyIndex));

  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoA.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoA );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoA.keyType != '3' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  memset(strKeyIndex,0,sizeof(strKeyIndex));
  memcpy(strKeyIndex,inData,2);
  inData += 2;
  dataLen = strtol(strKeyIndex,NULL,10);
  memset(panData, 0, sizeof(panData));
  memcpy(panData, inData, dataLen);
  inData += dataLen;

  memset(PAN,0,sizeof(PAN));
  if ( strlen(panData) < 16 )
  {
    for (i = 0; i < 16 - strlen(panData) ; i++)
    {
      PAN[i] = '0';
    }
    strcat(PAN,panData);
    PAN[16] = 0;
  }
  else
  {
    memcpy(PAN ,panData + strlen(panData) - 16,16);
  }

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex, inData, 3);
  inData += 3;
  dataLen = strtol(strKeyIndex,NULL,10);
  memset(enData, 0, sizeof(enData) );
  strToBin(inData, enData, dataLen);
  inData += dataLen * 2;

  rsa = RSA_new();
  if ( rsa == NULL )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  rsa->d = BN_bin2bn( (uchar *)hsmKeyInfoA.keyDataA, hsmKeyInfoA.keyLen, rsa->d );
  rsa->n = BN_bin2bn( (uchar *)hsmKeyInfoA.keyDataB, hsmKeyInfoA.keyLen, rsa->n );
  rsa->e = BN_bin2bn( "\x01\x00\x01", 3, rsa->e );

  memset(deData, 0, sizeof(deData) );

  rv = RSA_private_decrypt( dataLen, enData, deData, rsa, RSA_PKCS1_PADDING );
  if ( rv == -1 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密失败",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96解密失败");
    RSA_free( rsa );
    return TTS_EGENERAL;
  }

  RSA_free( rsa );

  ELOG(ERROR, "deData:%s", deData);
  ELOG(ERROR, "1inData:%s", inData);
  
  //deData 为银行卡密码信息  FFFFFFFF + PAN + 123456 + 

  if ( memcmp(deData, "FFFFFFFF", 8 ) != 0 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密后数据非法(PIN数据头信息不正确)",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96数据非法");
    return TTS_EGENERAL;
  }

/*
  if ( memcmp(deData + 8 , panData, 16 ) != 0 )
  {
    ELOG(ERROR,"密钥系统%d的密钥解密后数据非法(PAN数据不正确)",hsmKeyInfoA.keyIdx);
    strcpy(outData,"96数据非法");
    return TTS_EGENERAL;
  }
*/

  

  memset(pinData, 0, sizeof(pinData));
  memcpy(pinData, deData + 24, 6);

  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoB.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoB );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoB.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoB.keyType != '2' && hsmKeyInfoB.keyType != '1' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型%c不正确",hsmKeyInfoB.keyIdx, hsmKeyInfoB.keyType);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  dataLen = 32;
  memset(binWorkData, 0, sizeof(binWorkData));
  strToBin(inData, binWorkData, dataLen / 2);
  inData += dataLen;

  dataLen = 1;
  memset(pinType, 0, sizeof(pinType));
  memcpy(pinType, inData, dataLen);
  inData += dataLen;

  dedesBlock(hsmKeyInfoB.keyDataA, binWorkData, 16); 


  if(strcmp(pinType, "1") == 0)
  {
    memset(panData, 0, sizeof(panData));
    memcpy(panData,"0000000000000000",16);
  }

  memset(nPinData,0,sizeof(nPinData));
  rv = HsmProcessPin(PAN, binWorkData, pinData, nPinData, 'E');
  if ( rv )
  {
    ELOG(ERROR,"密钥系统加密USERPIN失败,返回码:%d",rv);
    strcpy(outData,"01无效PIN数据");
    return rv;
  }
  strncat(outData,"00",2);
  binToStr(nPinData,outData+2,8);
  return 0;

}

//银行卡密码加密 B3 + 密钥索引(5) + 密码数据(256) + FACTTORA + FACTTORB + FACTTORC | B2 + 00 + 密钥数据(16)
static int HsmFunc_B3(char *cmd,char *inData,int len,char *outData)
{
  char          strKeyIndex[6];
  int           rv;
  THsmKeyInfo   hsmKeyInfoA;
  RSA          *rsa;
  uchar         rsaN[129],rsaD[129];
  int           dataLen;
  char          binKeyB[17];
  char          pinData[9];
  char          panData[17];
  char          nPinData[9];
  uchar         enData[129],deData[129];
  char          factorA[17],factorB[17],factorC[17];


  memset(&hsmKeyInfoA, 0, sizeof(THsmKeyInfo));
  memset(strKeyIndex,0,sizeof(strKeyIndex));

  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoA.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoA );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoA.keyType != '2' &&  hsmKeyInfoA.keyType != '1' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex, inData, 2);
  inData += 2;
  dataLen = strtol(strKeyIndex,NULL,10);
  memset(pinData, 0, sizeof(pinData) );
  memcpy(pinData, inData, dataLen);

  dataLen = 8;
  memset(factorA,0,sizeof(factorA));
  strToBin(inData, factorA, dataLen);
  inData += 16;
  memset(factorB,0,sizeof(factorB));
  strToBin(inData, factorB, dataLen);
  inData += 16;
  memset(factorC,0,sizeof(factorC));
  strToBin(inData, factorC, dataLen);
  inData += 16;

  discreteKey(hsmKeyInfoA.keyDataA, factorA, hsmKeyInfoA.keyDataA);
  discreteKey(hsmKeyInfoA.keyDataA, factorB, hsmKeyInfoA.keyDataA);
  discreteKey(hsmKeyInfoA.keyDataA, factorC, hsmKeyInfoA.keyDataA);

  memset(panData, 0, sizeof(panData));
  memcpy(panData,"0000000000000000",16);

  memset(nPinData,0,sizeof(nPinData));
  rv = HsmProcessPin(panData, hsmKeyInfoA.keyDataA, pinData, nPinData, 'E');
  if ( rv )
  {
    ELOG(ERROR,"密钥系统加密USERPIN失败,返回码:%d",rv);
    strcpy(outData,"01无效PIN数据");
    return rv;
  }
  strncat(outData,"00",2);
  binToStr(nPinData,outData+2,8);

  return 0;
}













//银行卡密码加密 B3 + 密钥索引(5) + 密码数据(256) + FACTTORA + FACTTORB + FACTTORC | B2 + 00 + 密钥数据(16)
static int HsmFunc_B3(char *cmd,char *inData,int len,char *outData)
{
  char          strKeyIndex[6];
  int           rv;
  RSA          *rsa;
  uchar         rsaN[129],rsaD[129];
  int           dataLen;
  char          binKeyB[17];
  char          pinData[9];
  char          panData[17];
  char          nPinData[9];
  uchar         enData[129],deData[129];
  THsmKeyInfo   hsmKeyInfoA, hsmKeyInfoB;

  memset(&hsmKeyInfoA, 0, sizeof(THsmKeyInfo));

  memset(strKeyIndex,0,sizeof(strKeyIndex));
  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoA.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoA );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoA.keyType != '1' && hsmKeyInfoA.keyType != '2' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d",hsmKeyInfoA.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }

  memset(strKeyIndex, 0, sizeof(strKeyIndex));
  memcpy(strKeyIndex, inData, 2);
  inData += 2;
  dataLen = strtol(strKeyIndex,NULL,10);
  memset(enData, 0, sizeof(enData) );
  strToBin(inData, enData, dataLen);
  inData += dataLen * 2;

  memset(branchId, 0, sizeof(branchId));
  strToBin(inData, branchId, 4);
  memset(branchId + 4, 0xFF, 4);
  inData += 8;

  memset(psamId, 0, sizeof(psamId));
  //memcpy(psamId, inData, 16);
  strToBin(inData, psamId, 8);
  inData += 16;

  memset(&hsmKeyInfoB, 0, sizeof(THsmKeyInfo));
  memset(strKeyIndex,0,sizeof(strKeyIndex));
  memcpy(strKeyIndex,inData,5);
  inData += 5;
  hsmKeyInfoB.keyIdx = strtol(strKeyIndex,NULL,10);

  rv = HsmKeyBoxGetKey( &hsmKeyInfoB );
  if ( rv )
  {
    ELOG(ERROR,"查找密钥系统序号为%d的密钥失败,返回码%d",hsmKeyInfoB.keyIdx,rv);
    strcpy(outData,"96无主密钥");
    return rv;
  }

  if ( hsmKeyInfoB.keyType != '1' && hsmKeyInfoB.keyType != '2' )
  {
    ELOG(ERROR,"密钥系统%d的密钥类型不正确,返回码%d", hsmKeyInfoB.keyIdx, rv);
    strcpy(outData,"96无主密钥");
    return TTS_EGENERAL;
  }
 
  //ELOG(ERROR, "B (%s) P(%s)", branchId, psamId);
  discreteKey(hsmKeyInfoA.keyDataA, branchId, hsmKeyInfoA.keyDataA);
  discreteKey(hsmKeyInfoA.keyDataA, psamId,  hsmKeyInfoA.keyDataA);

  memset(MAC,0,sizeof(MAC));
  endesmBlock(hsmKeyInfoA.keyDataA, DES_MODE_2, MAC, 8);
  endesmBlock(hsmKeyInfoB.keyDataA, DES_MODE_2, hsmKeyInfoA.keyDataA, 16);
  
  strncat(outData,"00",2);
//  binToStr(outData + 2, hsmKeyInfoA.keyDataA, 16);
//  binToStr(outData + 34, MAC, 4);
  binToStr(hsmKeyInfoA.keyDataA, outData + 2, 16);
  binToStr(MAC, outData + 34, 4);

  return 0;
}
